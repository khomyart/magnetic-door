#include "U8glib.h"
#include <GyverTimers.h>
#include<Vector.h>

U8GLIB_SH1106_128X64 u8g(U8G_I2C_OPT_NONE);
#define UP_BUTTON               3
#define DOWN_BUTTON             6

#define BUTTON_STATE_READER     0

unsigned long time;
volatile unsigned long buttonPressedTime;

bool isButtonPressed = 0;
volatile int button;

volatile int currentWindowNumber = 0;
int currentFrame = 0;
int amoutOfFramesPerAnimation = 3;
int frameTime = 400; //milliseconds

char screenName[3][50] = 
{
  "Cards",
  "Climate control",
  "Settings"
};

struct Window
{
  Window(char *title_w, unsigned char animation_w[][128])
  {
    this->title = title_w;
    this->animation = animation_w;
  };
  Window();
  
  Window *parent;
  
  char *title;
  unsigned char (*animation)[128];
};

const unsigned char PROGMEM framebuffer[3][3][128] = 
{
  {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x55, 0x40, 0x0F, 0xFF, 0xFF, 0xF0, 0x18, 0x00, 0x00, 0x18, 0x10, 0x00, 0x00, 0x08, 0x11, 0x40, 0x00, 0x08, 0x13, 0xE0, 0x00, 0x08, 0x13, 0xE0, 0x7F, 0x88, 0x13, 0xE0, 0x00, 0x08, 0x11, 0x40, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08, 0x11, 0xCE, 0x73, 0x88, 0x11, 0x4A, 0x52, 0x88, 0x10, 0x00, 0x00, 0x08, 0x13, 0xFE, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08, 0x1A, 0xAA, 0xAA, 0xB8, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x18, 0x00, 0x00, 0x18, 0x10, 0x00, 0x00, 0x18, 0x10, 0x00, 0x00, 0x08, 0x13, 0xE0, 0x00, 0x08, 0x13, 0xE0, 0x7F, 0x8C, 0x13, 0xE0, 0x00, 0x0A, 0x11, 0xC0, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x0E, 0x10, 0x04, 0x52, 0x8C, 0x13, 0xCE, 0x73, 0x8C, 0x10, 0x00, 0x00, 0x0C, 0x11, 0x5C, 0x00, 0x0C, 0x11, 0xFE, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x0C, 0x18, 0x00, 0x00, 0x38, 0x1F, 0xFF, 0xFF, 0xEC, 0x0D, 0x00, 0x00, 0x08, 0x07, 0xFD, 0x00, 0x08, 0x00, 0x07, 0xFD, 0x18, 0x00, 0x00, 0x0B, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x0F, 0xE0, 0xC0, 0x00, 0xFC, 0x00, 0x40, 0x1F, 0x80, 0x00, 0x40, 0x70, 0x00, 0x00, 0x40, 0xC0, 0x00, 0x3E, 0x40, 0xC0, 0x01, 0xF0, 0x60, 0x8F, 0x80, 0x00, 0x20, 0xCF, 0x80, 0x00, 0x20, 0x4F, 0x80, 0x00, 0x20, 0x4F, 0x00, 0x02, 0x38, 0x40, 0x00, 0x4F, 0x3E, 0x40, 0x0D, 0xE0, 0x33, 0x61, 0xB8, 0x00, 0x11, 0x27, 0x80, 0x00, 0x1B, 0x20, 0x1C, 0x00, 0x1F, 0x21, 0xF8, 0x00, 0x7E, 0x23, 0x00, 0x1F, 0xCE, 0x30, 0x03, 0xF8, 0x02, 0x10, 0xBE, 0x00, 0x06, 0x1F, 0xE0, 0x00, 0x04, 0x18, 0x00, 0x00, 0x04, 0x0C, 0x00, 0x00, 0x04, 0x07, 0x80, 0x00, 0x0C, 0x00, 0xFC, 0x00, 0x08, 0x00, 0x0F, 0xC0, 0x08, 0x00, 0x00, 0x7E, 0x18, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x03, 0xC0, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x08, 0x3C, 0x00, 0x00, 0x0C, 0x1C, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x0C, 0x1C, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x0C, 0x1C, 0x00, 0x00, 0x08, 0x3C, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x08, 0x3C, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x1D, 0x78, 0x00, 0x00, 0x07, 0xE0, 0x00},
    {0x00, 0x03, 0xC0, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x08, 0x3C, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x08, 0x3C, 0x00, 0x00, 0x0C, 0x1C, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x0C, 0x1C, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x0C, 0x1C, 0x00, 0x00, 0x08, 0x3C, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x08, 0x3C, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x1C, 0x38, 0x00, 0x00, 0x37, 0xEC, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x1D, 0x78, 0x00, 0x00, 0x07, 0xE0, 0x00},
    {0x00, 0x03, 0xE0, 0x00, 0x00, 0x06, 0xB0, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x0C, 0x1E, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x0C, 0x1C, 0x00, 0x00, 0x0C, 0x1C, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x0C, 0x3E, 0x00, 0x00, 0x0C, 0x14, 0x00, 0x00, 0x0C, 0x38, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x00, 0x0D, 0x70, 0x00, 0x00, 0x08, 0x3C, 0x00, 0x00, 0x0C, 0x38, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x60, 0x0C, 0x00, 0x00, 0x30, 0x1C, 0x00, 0x00, 0x1D, 0x70, 0x00, 0x00, 0x07, 0xE0, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x17, 0xF0, 0x00, 0x00, 0xB3, 0x20, 0x00, 0x01, 0xF0, 0x60, 0x00, 0x03, 0x03, 0x3C, 0x00, 0x01, 0x8F, 0x96, 0x00, 0x00, 0xD8, 0x8E, 0x00, 0x00, 0xD8, 0xD8, 0x00, 0x03, 0x98, 0xD8, 0x00, 0x03, 0x0F, 0x9C, 0x00, 0x03, 0xC7, 0x0C, 0x00, 0xE0, 0x60, 0x7C, 0x00, 0xA3, 0x6A, 0xD8, 0x0D, 0xBF, 0xEE, 0xC0, 0x1F, 0x9D, 0xFB, 0xC0, 0x32, 0x01, 0x11, 0xC0, 0x18, 0x23, 0x00, 0x00, 0x08, 0xF9, 0xE0, 0x00, 0x19, 0x98, 0x60, 0x00, 0x79, 0x0C, 0x60, 0x00, 0x61, 0x89, 0xE0, 0x00, 0x78, 0xD9, 0x80, 0x00, 0x2C, 0xF1, 0x80, 0x00, 0x0C, 0x00, 0xC0, 0x00, 0x0D, 0x06, 0xC0, 0x00, 0x0B, 0xCF, 0x80, 0x00, 0x0E, 0x58, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xCD, 0x70, 0x00, 0x00, 0xF9, 0xF8, 0x00, 0x01, 0x90, 0x18, 0x00, 0x00, 0xC3, 0x30, 0x00, 0x00, 0xCF, 0x98, 0x00, 0x03, 0xD8, 0x9E, 0x00, 0x03, 0x18, 0xC6, 0x00, 0x03, 0x98, 0xDE, 0x00, 0x03, 0xCF, 0x98, 0x00, 0x00, 0x47, 0x10, 0x03, 0x8C, 0xC0, 0x18, 0x03, 0xCF, 0xDC, 0xF8, 0x02, 0x7A, 0xFD, 0xB8, 0x13, 0x56, 0x47, 0x00, 0x3E, 0x03, 0x47, 0x80, 0x34, 0x23, 0xE0, 0x00, 0x30, 0xF8, 0x60, 0x00, 0x19, 0x98, 0xE0, 0x00, 0x09, 0x0C, 0x80, 0x00, 0x39, 0x89, 0x80, 0x00, 0x70, 0xD8, 0xC0, 0x00, 0x34, 0xF0, 0x60, 0x00, 0x3C, 0x03, 0xC0, 0x00, 0x06, 0x07, 0xC0, 0x00, 0x06, 0xE6, 0x00, 0x00, 0x07, 0xF4, 0x00, 0x00, 0x03, 0x9E, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x23, 0xC0, 0x00, 0x00, 0xFE, 0x80, 0x00, 0x00, 0x5C, 0xF8, 0x00, 0x00, 0x60, 0x7C, 0x00, 0x00, 0x63, 0x0C, 0x00, 0x03, 0xCF, 0x98, 0x00, 0x03, 0x18, 0x98, 0x00, 0x03, 0x98, 0xDC, 0x00, 0x00, 0xD8, 0x86, 0x00, 0x00, 0xCF, 0x9E, 0x00, 0x01, 0x87, 0x3C, 0x02, 0x3D, 0xA0, 0x30, 0x07, 0x2D, 0xF9, 0xB0, 0x0D, 0xEC, 0x9B, 0xF0, 0x04, 0xCF, 0xDE, 0x60, 0x06, 0x07, 0xDE, 0x00, 0x3C, 0x20, 0xC0, 0x00, 0x78, 0xF9, 0xC0, 0x00, 0x61, 0x99, 0x80, 0x00, 0x39, 0x0C, 0xC0, 0x00, 0x19, 0x88, 0xE0, 0x00, 0x08, 0xD8, 0x60, 0x00, 0x38, 0xF1, 0xE0, 0x00, 0x32, 0x03, 0x00, 0x00, 0x1F, 0x03, 0x00, 0x00, 0x1B, 0x3B, 0x00, 0x00, 0x01, 0x6F, 0x00, 0x00, 0x01, 0xC6, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  }
};
//

Window *window1 = new Window("Cards", framebuffer[0]);
Window *window2 = new Window("Climate control", framebuffer[1]);

Vector<Window*> menu;
menu.push_back(window1);

void draw(void)
{
  /* Draw screen title */
  u8g.setFont(u8g_font_helvR08);
//  u8g.setPrintPos(128/2 - u8g.getStrWidth(screenName[currentWindowNumber])/2,55);
//  u8g.print(screenName[currentWindowNumber]);
  u8g.setPrintPos(128/2 - u8g.getStrWidth(window1->title)/2,55);
  u8g.print(window1->title);

  /* Draw additional info */
  u8g.setPrintPos(128 - 15,15);
  u8g.print(currentWindowNumber + 1);
  /* Draw image */
//  u8g.drawBitmapP(48, 3, 4, 32, framebuffer[currentWindowNumber][currentFrame]);
  u8g.drawBitmapP(48, 3, 4, 32, window1->animation[currentFrame]);
}

void updateScreen()
{
  if (currentFrame == 2)
  {
    currentFrame = 0;
  } else 
  {
    currentFrame++;
  }
}

void clearDisplay() {
  u8g.firstPage();
  do {
  } while ( u8g.nextPage() );
};

void changeCurrentWindow(int button)
{
  if (button == UP_BUTTON)
  {
    if (currentWindowNumber == 2)
    {
      currentWindowNumber = 0;
    } 
    else 
    {
      currentWindowNumber++;
    }
    buttonPressedTime = millis();
    button = 0;
  }

  if (button == DOWN_BUTTON)
  {
    if (currentWindowNumber == 0)
    {
      currentWindowNumber = 2;
    } 
    else 
    {
      currentWindowNumber--;
    }
    buttonPressedTime = millis();
    button = 0;
  }
}

void setup() {
  clearDisplay();
  Serial.begin(9600);
  Timer2.setFrequency(400);
  Timer2.enableISR(CHANNEL_A);

}

ISR(TIMER2_A)
{
  if(millis() - buttonPressedTime > 400){
    button = analogRead(BUTTON_STATE_READER);
    button = map(button, 0, 1023, 0, 20);
    button = constrain(button, 0, 20);
    if (button != 0)
    {
      changeCurrentWindow(button);
    }
  }
}

void loop() {
  Serial.println(window1->title);
  if (millis() - time > frameTime)
  {
    u8g.firstPage();
    do {
      draw();
    } while ( u8g.nextPage() );
    updateScreen();
    time = millis();
  }
  
}
